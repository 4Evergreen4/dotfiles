#!/usr/bin/env bash

# Turns an application into a dialog window using i3.  Only gtk apps are
# supported.

usage="Usage: i3dialog [-ht] [-e CMD] [-o X,Y] [-p X,Y] [-s W,H] [--] APPLICATION"
read -r -d '' help <<EOF
Runs an application as a dialog window using i3. (APPLICATION must accept gtk
arguments)

$usage

  -e CMD  Extra i3 command to run on the dialog window after it opens.
  -o X,Y  Offset dialog position.  If X is positive the dialog will be moved to
          the right, and if it is negative it will be moved to the left.  If Y
          is positive the dialog will be moved down, and if it is negative the
          dialog will be moved up.  If this option is not given, no offset will
          take place.
  -p X,Y  Set position of dialog.  Defaults to mouse position.
  -s W,H  Set size of dialog to width and height.  If not given the window's
          default size is used.
  -t      Toggle.  This will close the dialog if it already exists, but will
          launch the dialog normally if it does not exist.  If this option is
          not given and the window already exists, the existing will be foucsed
          and the script will exit.
  -h      Show this help message.

EOF
optstring=":e:ho:p:s:t-"

### FUNCTIONS ###
# Show an error message along with a short usage message and exit.
error() {
    printf 'ERROR: %s\n' "$1" >&2
    printf '%s\n' "$usage" >&2
    exit 1
}

# Generate the instance name for an application base on its name.
getinstance() {
    if command -v md5sum >/dev/null; then
        local instance
        instance="$(md5sum <<<"$1" | cut -d ' ' -f 1)"
    else
        local instance
        instance="$(cksum <<<"$1" | cut -d ' ' -f 1)"
    fi
    printf '__dialog_%s\n' "$instance"
}

# Takes an instance name and an i3 command and runs the command on the window
# with the given instance name.
instancecmd() {
    i3-msg "[instance=\"$1\"] $2" >/dev/null 2>&1
}

# Determines whether window with instance name exists yet.
instanceexists() {
    i3-msg -t get_tree | grep -q "instance.:.$1"
}

### OPTION HANDLING ###
WIDTH=""
HEIGHT=""
EXTCMD=""
X=""
Y=""
XOFFSET="0"
YOFFSET="0"
TOGGLE=false
while getopts $optstring opt; do
    case $opt in
        e)
            EXTCMD="$OPTARG";;
        h)
            printf '%s\n' "$help"
            exit 0
            ;;
        o)
            IFS=','; offset=($OPTARG); unset IFS
            XOFFSET="${offset[0]}"
            YOFFSET="${offset[1]}"
            ;;
        p)
            IFS=','; pos=($OPTARG); unset IFS
            X="${pos[0]}"
            Y="${pos[1]}"
            ;;
        s)
            IFS=','; size=($OPTARG); unset IFS
            WIDTH="${size[0]}"
            HEIGHT="${size[1]}"
            ;;
        t)
            TOGGLE=true;;
        -) :;;
        \?) error "invalid option: \"-$OPTARG\"";;
        :) error "option \"-$OPTARG\" requires an argument";;
    esac
done

shift $((OPTIND-1))
CMD="$1"

[[ -z $CMD ]] && error "application name is required"

### SCRIPT ###
instance="$(getinstance "$CMD")"

if [[ $TOGGLE = true ]] && instanceexists "$instance"; then
    instancecmd "$instance" "kill"
    exit 0
elif instanceexists "$instance"; then
    instancecmd "$instance" "focus"
    exit 0
fi

eval "$CMD" --name="$instance" '>/dev/null 2>&1 &'

until instanceexists "$instance"; do :; done;

i3-msg "[instance=\"$instance\" tiling] floating enable" >/dev/null 2>&1

if [[ -n $HEIGHT || -n $WIDTH ]]; then
    instancecmd "$instance" "resize set $WIDTH px $HEIGHT px"
fi

if [[ -z $X || -z $Y ]]; then
    instancecmd "$instance" "move absolute position mouse"
else
    instancecmd "$instance" "move position $X px $Y px"
fi

if (( XOFFSET < 0 )); then
    instancecmd "$instance" "move left $(tr -d - <<<"$XOFFSET") px"
elif (( XOFFSET > 0 )); then
    instancecmd "$instance" "move right $XOFFSET px"
fi
if (( YOFFSET < 0 )); then
    instancecmd "$instance" "move up $(tr -d - <<<"$YOFFSET") px"
elif (( YOFFSET > 0 )); then
    instancecmd "$instance" "move down $YOFFSET px"
fi

instancecmd "$instance" "sticky enable"

[[ -n $EXTCMD ]] && instancecmd "$instance" "$EXTCMD"

exit 0

## vim:fdm=expr:fdl=0:fdc=3:
## vim:fde=getline(v\:lnum)=~'^##'?'>'.(matchend(getline(v\:lnum),'##*')-2)\:'='
