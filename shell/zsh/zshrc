# Evergreen's zshrc #

### ENVIRONMENT VARIABLES ###

if [[ -f "$HOME/.config/environment" ]]; then
    source "$HOME/.config/environment"
fi

### COMPLETION ###

# Enable completers for performing shell expansions, normal completions,
# reinstating completions in ignored-patterns, and approximate completions.
zstyle ':completion:*' completer _expand _complete _ignored _approximate

# Use an interactive menu to select completion options instead of just cycling
# through them
zstyle ':completion:*' menu select

# Caching for slower completion functions
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path "$XDG_CACHE_HOME/zsh/zcompcache-$ZSH_VERSION"

# Group completions by category
zstyle ':completion:*:*:*:*:descriptions' format '%F{blue}-- %d --%f'
zstyle ':completion:*' group-name ''

# Redue //dirname to /dirname when completing instead of /*/dirname
zstyle ':completion:*' squeeze-slashes true

# Allow lower case characters to complete itself or its uuppercase counterpart
zstyle ':completion:*' matcher-list '+' '+m:{[:lower:]}={[:upper:]}'

# Perform completion without showing menu if it is unambiguous
zstyle ':completion:*' insert-unambiguous true

# Set prompt for when completion items take up the whole screen (or more)
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s

# Allow 1 error in approximate completion
zstyle ':completion:*' max-errors 2

# When showing approximate completions, always add the original to the list
zstyle ':completion:*' original true

# Not sure what this does tbh
zstyle ':completion:*' completions 1

### OPTIONS ###

# History options (pretty self-explanatory)
HISTFILE="$XDG_DATA_HOME/zsh/history"
HISTSIZE=10000
SAVEHIST=10000

# Change directories without typing "cd"
setopt autocd

# Corrects my mistakes (and makes me lazier)
setopt correct

# Better globbing for more fun!
setopt extended_glob

# Save extra information about commands in the history
setopt extended_history

# Remove superfluous items from history
setopt hist_expire_dups_first hist_ignore_dups hist_ignore_space

# Do history expnasion inline instead of immediately executing
setopt hist_verify

# Add lines to history file as they are entered and share between zsh sessions
setopt inc_append_history

# Immediately select the first option when autocompleting
setopt menu_complete

# Allow command and variable subtitution in prompt
setopt prompt_subst

# Automatic cd stack keeping
setopt auto_pushd pushd_ignore_dups pushd_silent
DIRSTACKSIZE=8

# Stop beeping at me
unsetopt list_beep

### ZSH MODULES ###

# Homebrew
if type brew &>/dev/null; then
  FPATH=$(brew --prefix)/share/zsh/site-functions:$FPATH
fi

# Initialize completion system
autoload -Uz compinit
compinit -d "$XDG_CACHE_HOME/zsh/zcompdump-$ZSH_VERSION"

# Required for menu-completion widget and many other goodies
autoload -Uz complist

# help me
autoload -Uz run-help

# Calculating bliss
autoload -Uz zcalc

### FUNCTIONS ###

function progexists() {
    command -v "$1" >/dev/null 2>&1
    return
}

function notify() {
    eval "$@"
    notify-send "Command Finished" "$*"
}

function launch() {
    "$@" >/dev/null 2>&1 &
}

function cdr() {
    if [[ $(git rev-parse --is-inside-work-tree 2> /dev/null) != 'true' ]]; then
        echo "error: not in a git repository" 1>&2
        return 1
    fi

    local relative_path="$1"
    local root_path="$(git rev-parse --show-toplevel)"

    if [[ -n "$relative_path" ]]; then
        cd "$root_path/$relative_path"
    else
        cd "$root_path"
    fi
}

### KEY BINDINGS ###

# Emacs keys pls ðŸ˜ˆ
bindkey -e
_fix_cursor() {
   echo -ne '\e[5 q'
}
precmd_functions+=(_fix_cursor)

# Shift tab pls
bindkey '^[[Z' reverse-menu-complete

### COLORS ###

#### DETECTION ####

# TODO: write 8 color and 256 color detection algorithm
# For now I'll just be naive
use_color=true
use_256color=true

#### CONFIGURATION ####

if $use_256color; then
    # Do stuff for 256+ color terminals

    if grep -q Microsoft /proc/version; then
        export TERM="xterm-256color"
    else
        # Make tmux use 256 colors
        export TERM="screen-256color"
    fi
fi

if $use_color; then
    # Do stuff for 8+ color terminals.

    # Set colors for ls using dircolors.  Prefer ~/.dir_colors over
    # /etc/DIR_COLORS, and use defaults if no configs are available.
    if [[ -e ~/.dir_colors ]]; then
        eval $(dircolors -b "$HOME/.dir_colors")
    elif [[ -f /etc/DIR_COLORS ]]; then
        eval $(dircolors -b /etc/DIR_COLORS)
    else
        eval $(dircolors -b)
    fi

    # Use the same colors as ls for autocompletion
    zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}

    # Make grep use color.
    alias grep='grep --colour=auto'
    alias egrep='egrep --colour=auto'
    alias fgrep='fgrep --colour=auto'

    # Use exa for ls if available
    if progexists exa; then
        alias ls='exa'
        alias l='exa -lbF --git'
        alias ll='exa -lbGF --git'
        alias llm='exa -lbGd --git --sort=modified'
        alias la='exa -lbhHigmuSa --time-style=long-iso --git --color-scale'
        alias lx='exa -lbhHigmuSa@ --time-style=long-iso --git --color-scale'
        alias lS='exa -1'
        alias lt='exa --tree --level=2'
    else
        alias l='ls -halt --color=always'
        alias ll='ls -halt --color=always'
        alias la='ls -halt --color=always'
    fi

    # Color man pages
    export LESS_TERMCAP_mb=$'\E[01;32m'
    export LESS_TERMCAP_md=$'\E[01;32m'
    export LESS_TERMCAP_me=$'\E[0m'
    export LESS_TERMCAP_se=$'\E[0m'
    export LESS_TERMCAP_so=$'\E[01;47;34m'
    export LESS_TERMCAP_ue=$'\E[0m'
    export LESS_TERMCAP_us=$'\E[01;36m'
    export LESS=-r
fi

### PROMPT ###

#### COMMAND TIME TRACKING ####
ZSH_TIME_EXCLUDE=(nvim less)
_command_time_preexec() {
    # check excluded
    if [ -n "$ZSH_COMMAND_TIME_EXCLUDE" ]; then
        cmd="$1"
        for exc ($ZSH_COMMAND_TIME_EXCLUDE) do;
            if [ "$(echo $cmd | grep -c "$exc")" -gt 0 ]; then
                # echo "command excluded: $exc"
                return
            fi
        done
    fi

    timer=${timer:-$SECONDS}
    ZSH_COMMAND_TIME_MSG=${ZSH_COMMAND_TIME_MSG-"Time: %s"}
    ZSH_COMMAND_TIME_COLOR=${ZSH_COMMAND_TIME_COLOR-"white"}
    export ZSH_COMMAND_TIME=""
}

_command_time_precmd() {
    if [ $timer ]; then
        timer_show=$(($SECONDS - $timer))
        if [ -n "$TTY" ] && [ $timer_show -ge ${ZSH_COMMAND_TIME_MIN_SECONDS:-3} ]; then
            export ZSH_COMMAND_TIME="$timer_show"
            if [ ! -z ${ZSH_COMMAND_TIME_MSG} ]; then
                zsh_command_time
            fi
        fi
        unset timer
    fi
}

zsh_command_time() {
    if [ -n "$ZSH_COMMAND_TIME" ]; then
        timer_show=$(printf '%dh:%02dm:%02ds\n' $(($ZSH_COMMAND_TIME/3600)) $(($ZSH_COMMAND_TIME%3600/60)) $(($ZSH_COMMAND_TIME%60)))
        print -P "%F{$ZSH_COMMAND_TIME_COLOR}$(printf "${ZSH_COMMAND_TIME_MSG}\n" "$timer_show")%f"
    fi
}

precmd_functions+=(_command_time_precmd)
preexec_functions+=(_command_time_preexec)

#### GIT BRANCH ####

function __in_git_repo() {
    progexists "git" && git rev-parse --is-inside-work-tree &>/dev/null
}

function __git_branch() {
    local branch=""
    if __in_git_repo; then
        if git symbolic-ref --short HEAD &>/dev/null; then
            branch="$(git symbolic-ref --short HEAD)"
        else
            local tag="$(git describe --tags --exact-match 2>/dev/null)"
            if [[ -n "$tag" ]]; then
                branch="$tag"
            else
                branch="#$(git rev-parse --short=0 HEAD)"
            fi
        fi
    fi
    [[ -n "$branch" ]] && echo "*%F{magenta}$branch%f"
}

#### VIRTUALENV ####

function __virtualenv() {
    if [[ -n "$VIRTUAL_ENV" ]]; then
        # Remove trailing slash
        local virtual_env="${VIRTUAL_ENV%/}"
        echo " %F{yellow}<${virtual_env##*/}>%f"
        return 0
    else
        printf ""
        return 1
    fi
}

#### SSH HOSTNAME ####

function __is_ssh_session() {
    if [[ -n "$SSH_CLIENT" || -n "$SSH_TTY" ]]; then
        return 0
    else
        case "$(ps -p $PPID | awk 'END {print $4}')" in
            sshd|*/sshd) return 0;;
        esac
    fi

    return 1
}

function __ssh_hostname() {
    if __is_ssh_session; then
        echo "@%F{yellow}$HOST%f:"
    fi
}

#### LEFT PROMPT ####

# This displays the return code of the previous command (green for success, red
# for failure)
PROMPT='%(0?|%F{green}|%F{red})%?%f '

# Displays SSH hostname if in an SSH session
PROMPT+='$(__ssh_hostname)'

# Displays the current working directory.  If there are 3 or less path
# components, display them as normal.  If there are 4 or more, display the first
# path component, â€¦, then the last 2 components.
PROMPT+='%F{white}%B%(4~|%-1~/.../%2~|%~)%f%b '

# Color the character directly before the editing line red for root and blue for
# non-root.
PROMPT+='%B%(!|%F{red}|%F{blue})>%b%f '

#### RIGHT PROMPT ####

RPROMPT='$(__git_branch)$(__virtualenv)'

### ALIASES ###

# Confirm before overwriting
alias cp="cp -i"

# Human readable sizes
alias df="df -h"

# Quick editor shortcut
alias e="\$EDITOR"

# Use the familiar "help" instead of run-help
unalias run-help &>/dev/null
alias help=run-help

# XDG conformance
alias wget=wget --hsts-file="$XDG_DATA_HOME/wget-hsts"

# Quickly switch through pushd stack
alias d='dirs -v'
for index ({1..$DIRSTACKSIZE}) alias "$index"="cd +${index}"; unset index

### TMUX ###

tmux_user () {
    tmux new -A -s "$USER"
}

alias t="tmux_user"

### FZF ###

# Setup fzf
# ---------
if [[ ! "$PATH" == *$HOME/.local/share/fzf/bin* ]]; then
  export PATH="${PATH:+${PATH}:}$HOME/.local/share/fzf/bin"
fi

# Auto-completion
# ---------------
[[ $- == *i* ]] && source "$HOME/.local/share/fzf/shell/completion.zsh" 2> /dev/null

# Key bindings
# ------------
source "$HOME/.local/share/fzf/shell/key-bindings.zsh"

### MISC ###

# Source local settings
[[ -f $XDG_CONFIG_HOME/zsh/.zshrc.local ]] && source "$XDG_CONFIG_HOME/zsh/.zshrc.local"

### PLUGINS ###

PLUGS=(zsh-syntax-highlighting/zsh-syntax-highlighting.zsh zsh-z/zsh-z.plugin.zsh zsh-autoenv/autoenv.zsh)

export ZSHZ_DATA="$XDG_CONFIG_HOME/z"

for plug in $PLUGS; do
    plug_path="$XDG_CONFIG_HOME/zsh/$plug"
    [[ -f $plug_path ]] && source "$plug_path"
done

# Remove all /mnt/c references in path when using WSL2, it slows down syntax
# highlighting significantly
[[ -n $ZSH_HIGHLIGHT_VERSION ]] \
    && [[ -d /run/WSL/ ]] \
    && export PATH="$(echo $PATH | sed -e 's|:/mnt/c/[^:]*||g')" \
    && export PATH="$PATH/:/mnt/c/Program Files/Microsoft VS Code/bin"

true

## vim:fdm=expr:fdl=0:fdc=3:et:sts=4:ts=4:sw=4
## vim:fde=getline(v\:lnum)=~'^##'?'>'.(matchend(getline(v\:lnum),'##*')-2)\:'='
