" Make vim incomaptible with vi, usually this is redundant, but I have run into
" cases where it does make a difference.
set nocompatible

" Syntax colors
syntax on

" Filetype plugins
filetype plugin on
filetype plugin indent on

" Get user's vim config directory (used later)
let g:user_config_dir = split(&rtp, ',')[0]

" Load matchit plugin that is bundled with vim
runtime macros/matchit.vim

""" PLUGINS
" Use pathogen to manage manually installed plugins
execute pathogen#infect('plugins-dev/{}', 'plugins-local/{}')

" Generate helptags for manually installed plugins
Helptags

" Use vim-plug for all other plugins
let g:plug_window = 'botright new'
call plug#begin(g:user_config_dir . "/plugins")

" Seamless vim/tmux naviagation
Plug 'christoomey/vim-tmux-navigator'

" Better syntax highlighting, autoindentation, linting, folding, and more for haskell
Plug 'dag/vim2hs'

" Highlight all search results while typing
Plug 'haya14busa/incsearch.vim'

" Improved 'f' motion and much more precise 's' motion
Plug 'justinmk/vim-sneak'

" LaTeX
Plug 'lervag/vim-latex'

" Type inspection and documentation lookup for haskell
Plug 'lukerandall/haskellmode-vim'

" Gruvbox colorscheme
Plug 'morhetz/gruvbox'

" i3 config syntax higlighting
Plug 'PotatoesMaster/i3-vim-syntax'

" Snippets
if has('python') || has('python3')
    Plug 'SirVer/ultisnips'
    Plug 'honza/vim-snippets'
endif

" Better lua indentation and syntax highlighting
Plug 'tbastos/vim-lua'

" A temporary workaround until this patch is merged:
" https://groups.google.com/forum/#!topic/vim_dev/ASn8QqQqVe0
Plug 'tmux-plugins/vim-tmux-focus-events'

" Causes the default register to be synchronized with the tmux paste buffer when
" text is yanked. (requires vim-tmux-focus-events)
Plug 'roxma/vim-tmux-clipboard'

" Easily comment stuff out
Plug 'tpope/vim-commentary'

" Git integration
Plug 'tpope/vim-fugitive'

" Support for '.' repetition in plugins
Plug 'tpope/vim-repeat'

" Mappings for easily surrounding text with quotes, braces parentheses, etc.
Plug 'tpope/vim-surround'

" Provides many convenient bracket mappings
Plug 'tpope/vim-unimpaired'

" Provides text objects and folding for indented languages
Plug 'tweekmonster/braceless.vim'

" Provides pandoc markdown highlighting
Plug 'vim-pandoc/vim-pandoc'
Plug 'vim-pandoc/vim-pandoc-syntax'

" Linting
if v:version >= 800 || has('nvim')
    Plug 'w0rp/ale'
endif

call plug#end()

""" COLORSCHEME
if &t_Co > 16 || has("gui_running") " 256 color scheme
    set background=dark
    let g:gruvbox_bold = 0
    let g:gruvbox_italic = 0
    let g:gruvbox_italicize_comments = 0
    let g:gruvbox_undercurl = 0
    let g:gruvbox_contrast_dark = 'hard'
    let g:gruvbox_contrast_light = 'hard'
    try
        colorscheme gruvbox
    catch /E185/
        colorscheme spacegray
    endtry
else " 16 color scheme
    colorscheme desert
endif

""" OPTIONS
" Make backspace work
set backspace=indent,eol,start

" Don't search tags file when using insert completion
set complete=.,w,b,u,i

" Don't show preview with insert completion
set completeopt-=preview

" Ask before quiting without saving
set confirm

" Make it easier to see what line I am on
set cursorline

" Make help window half the size of the terminal window
set helpheight=0

" Allow abandoning of buffers without writing them
set hidden

" Ignore case while searching
set ignorecase

" Show first search result while typing
set incsearch

" Highlight search result
set hlsearch

" Disable on vimrc reload
nohlsearch

" Always show status line
set laststatus=2

" Show tabs and trailing whitespace
set list
set listchars=tab:>\ ,extends:>,precedes:<,nbsp:-,trail:-

" Allow modelines
set modeline

" Disable mouse
set mouse=

" Don't jump to matching bracket
set noshowmatch

" Line numbers
set number

" Allow recursive searching within current directory using the find command
set path=.,**

" Set completion menu height
set pumheight=10

" Set margin for scrolling and scroll distance when margin is hit
set scrolloff=3
set sidescrolloff=3
set sidescroll=1

" Don't save global options and mappings in session files, I don't usually make
" a habit of creating mappings mid session that I want to use later.
set sessionoptions-=options

" Only ignore case if there are no uppercase letters in pattern
set smartcase

" Allows more tab pages when using the -p option than the default
set tabpagemax=25

" Set text width, lines will automatically wrap at this position
set textwidth=80
let &colorcolumn = &textwidth

" Change timeout between key strokes to something more reasonable
set ttimeout
set ttimeoutlen=100

" I generally have a fast terminal connection
set ttyfast

" Allow selections beyond end of line when in visual block mode
set virtualedit=block

" Ctrl-Z in a mapping acts like <Tab> on cmdline
set wildcharm=<c-z>

" <BS> <Space> h l <Left> <Right> can change lines
set whichwrap=b,s,h,l,<,>

" Tab completion
set wildmenu
set wildmode=full

""" PLUGIN OPTIONS
"""" Haskellmode
if executable("/usr/bin/firefox")
    let g:haddock_browser = "/usr/bin/firefox"
endif

let g:haddock_docdir = "/usr/share/doc/ghc/html/"

"""" incsearch
" Replace default mappings with incsearch mappings
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)

" Don't save search error messages to message history
let g:incsearch#do_not_save_error_message_history = 1

" Use very magic mode by default
let g:incsearch#magic = '\v'

"""" netrw
" Use tree style browser
let g:netrw_liststyle = 3

" Don't use seperate window for errors
let g:netrw_use_errorwindow = 0

" Don't show banner
let g:netrw_banner = 0

"""" Pandoc
if exists('pandoc#loaded')
    autocmd! BufNewFile,BufFilePRe,BufRead *.md set filetype=markdown.pandoc
endif

let g:pandoc#syntax#conceal#use = 0

"""" Rust
" Disable default settings
let g:rust_recommended_style = 0

"""" sneak
" Use sneak for f and F
nmap f <Plug>Sneak_f
nmap F <Plug>Sneak_F
xmap f <Plug>Sneak_f
xmap F <Plug>Sneak_F
omap f <Plug>Sneak_f
omap F <Plug>Sneak_F

" Use sneak for t and T
nmap t <Plug>Sneak_t
nmap T <Plug>Sneak_T
xmap t <Plug>Sneak_t
xmap T <Plug>Sneak_T
omap t <Plug>Sneak_t
omap T <Plug>Sneak_T

"""" UltiSnips
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"
let g:UltiSnipsListSnippets="<c-r><c-j>"

let g:UltiSnipsEditSplit="horizontal"

""" INDENTATION
" Automatically indent when creating new line
set autoindent

" Easily change indentation width
function! SetIndentWidth(width)
    let &shiftwidth = a:width
    let &softtabstop = &shiftwidth
    let &tabstop = &shiftwidth
endfunction

call SetIndentWidth(4)

" Use spaces instead of tabs
set expandtab

""" KEY MAPPINGS
" Set leader to space key
let mapleader = "\<space>"

" Set local leader to comma
let maplocalleader = ","

" Easily edit my config files.
nnoremap <leader>ev :e $MYVIMRC<cr>
nnoremap <leader>et :e ~/.tmux.conf<cr>
nnoremap <leader>eb :e ~/.bashrc<cr>
nnoremap <leader>ez :e ~/.zshrc<cr>

" Quick vimrc reload
nnoremap <leader>R :mkview<cr>:source $MYVIMRC<cr>:loadview<cr>

" Easily open files that can be found in the current directory or subdirectories
" of it.
nnoremap <leader>f :find **/*

" Same, except only include file names instead of relative path
nnoremap <leader>F :find *

" Some mappings which make it faster to replace words throughout a file
nnoremap <leader>; *``cgn
nnoremap <leader>, #``cgN

" Keep keys on home row when exiting insert. I can map capslock to escape on
" some systems, but I am keeping this here for convenience.
inoremap jk <esc>

" Make Y behave more like D
nnoremap Y y$

function! Refresh()
    redraw!
    syntax sync fromstart
endf

" Temporarily disable search highlighting and refresh
nnoremap <silent> <leader><space> :call Refresh()<cr>:nohlsearch<cr>

" Focus current fold.  (close all folds that aren't beneath the cursor)
nnoremap <leader>z zMzv

" I use the system clipboard enough that this is worth it
if has("clipboard")
    nnoremap <leader>p "+p
    nnoremap <leader>P "+P
    nnoremap <leader>y "+y
    vnoremap <leader>y "+y
    vnoremap <leader>p "+p
endif

" This allows for repeating wincmds with the Q key
nnoremap <silent> <C-w> :<C-u>call <SID>Wincmd(v:count, getchar())<CR>
nnoremap <silent> Q :<C-u> call <SID>WincmdRepeat(v:count)<CR>

function! s:Wincmd(count, key)
    let if_count = a:count ? a:count : ""
    let g:last_wincmd = "wincmd " . nr2char(a:key)
    execute if_count . g:last_wincmd
endfunction

function! s:WincmdRepeat(count)
    let if_count = a:count ? a:count : ""
    execute if_count . g:last_wincmd
endfunction

" Easily strip trailing whitespace
function! StripTrailingWhitespace()
    " Save cursor position
    let l:save = winsaveview()
    " Remove trailing whitespace
    %s/\v\s+$//e
    " Move cursor to original position
    call winrestview(l:save)
    echo "Stripped trailing whitespace"
endfunction

" Map this function
nnoremap <leader>sw :call StripTrailingWhitespace()<cr>

""" AUTOCOMMANDS
if has('autocmd')
" This will set certain options for really large files, which results in
" better performance when editing them.

" What is considered to be a large file (in bytes)
let g:large_file = 1024 * 1024 * 15

function! s:LargeFileSetOptions()
    setlocal noswapfile
    setlocal bufhidden=unload
    setlocal readonly
    setlocal eventignore+=Filetype
    setlocal undolevels=-1
endfunction

augroup vimrc
    autocmd!

    " Detect large files and set the appropriate options.
    autocmd BufReadPre * let f=expand("<afile>") | if getfsize(f) >
                \ g:large_file | call <SID>LargeFileSetOptions() | endif

    " Automatically open quickfix window when :helpgrep is run
    autocmd QuickFixCmdPost helpgrep copen

    " Automatically reload all snippets on save
    autocmd BufWritePost *.snippets call ReloadAllSnippets()
augroup END
endif

""" BACKUP AND UNDO
" Use undo file
set undofile

" Allow undoing changes not made in the current session
let &undodir = g:user_config_dir . '/tmp/undo//'

" Make those folders automatically if they don't already exist
if !isdirectory(expand(&undodir))
    call mkdir(expand(&undodir), "p")
endif

" Add this folder to wildignore, since I don't need to edit any files from there
set wildignore+=*/tmp/undo/*

""" STATUS LINE
set statusline=%!MyStatusline()

function! MyStatusline()
    let statusline = ''
    let filename = expand('%')
    let squeeze_width = winwidth(0) - strlen(filename) / 2

    " Buffer number
    let statusline .= '[%-3.3n] '
    " File name
    if squeeze_width > 50
        let statusline .= '%f '
    endif
    " Window flags
    let statusline .= '%h%w%q'
    if squeeze_width > 50
        " Readonly flag
        let statusline .= '%r'
    endif
    " Modified flag
    let statusline .= '%m'
    " Switch to right side
    let statusline .= '%='
    " Remove these if window width is too small
    if squeeze_width > 50
        " File encoding
        let statusline .= '[' . (strlen(&fenc) ? &fenc : 'none') . ','
        " File format
        let statusline .= &ff . ']'
    endif
    " Filetype
    let statusline .= '%y '
    " Cursor line and total lines
    let statusline .= '%l/%L'
    " Cursor column
    let statusline .= '-%v '
    " Percentage through file
    let statusline .= '%P'

    return statusline
endfunction

""

"" vim:fdm=expr:fdl=0:fdc=3:
"" vim:fde=getline(v\:lnum)=~'^""'?'>'.(matchend(getline(v\:lnum),'""*')-2)\:'='
